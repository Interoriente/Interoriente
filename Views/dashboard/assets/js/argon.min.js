/*!
*Linea 497 -> Sales Value: Lugar donde se debe editar.
* Linea 431 -> Total Orders: Lugar donde se debe editar.

*/
"use strict";
let map,
  lat,
  lng,
  Layout = (function () {
    function a() {
      $(".sidenav-toggler").addClass("active"),
        $(".sidenav-toggler").data("action", "sidenav-unpin"),
        $("body")
          .removeClass("g-sidenav-hidden")
          .addClass("g-sidenav-show g-sidenav-pinned"),
        $("body").append(
          '<div class="backdrop d-xl-none" data-action="sidenav-unpin" data-target=' +
            $("#sidenav-main").data("target") +
            " />"
        ),
        Cookies.set("sidenav-state", "pinned");
    }
    function e() {
      $(".sidenav-toggler").removeClass("active"),
        $(".sidenav-toggler").data("action", "sidenav-pin"),
        $("body").removeClass("g-sidenav-pinned").addClass("g-sidenav-hidden"),
        $("body").find(".backdrop").remove(),
        Cookies.set("sidenav-state", "unpinned");
    }
    let n = Cookies.get("sidenav-state")
      ? Cookies.get("sidenav-state")
      : "pinned";
    $(window).width() > 1200 &&
      ("pinned" == n && a(),
      "unpinned" == Cookies.get("sidenav-state") && e(),
      $(window).resize(function () {
        $("body").hasClass("g-sidenav-show") &&
          !$("body").hasClass("g-sidenav-pinned") &&
          $("body").removeClass("g-sidenav-show").addClass("g-sidenav-hidden");
      })),
      $(window).width() < 1200 &&
        ($("body").removeClass("g-sidenav-hide").addClass("g-sidenav-hidden"),
        $("body").removeClass("g-sidenav-show"),
        $(window).resize(function () {
          $("body").hasClass("g-sidenav-show") &&
            !$("body").hasClass("g-sidenav-pinned") &&
            $("body")
              .removeClass("g-sidenav-show")
              .addClass("g-sidenav-hidden");
        })),
      $("body").on("click", "[data-action]", function (n) {
        n.preventDefault();
        let t = $(this),
          o = t.data("action");
        t.data("target");
        switch (o) {
          case "sidenav-pin":
            a();
            break;
          case "sidenav-unpin":
            e();
            break;
          case "search-show":
            t.data("target"),
              $("body")
                .removeClass("g-navbar-search-show")
                .addClass("g-navbar-search-showing"),
              setTimeout(function () {
                $("body")
                  .removeClass("g-navbar-search-showing")
                  .addClass("g-navbar-search-show");
              }, 150),
              setTimeout(function () {
                $("body").addClass("g-navbar-search-shown");
              }, 300);
            break;
          case "search-close":
            t.data("target"),
              $("body").removeClass("g-navbar-search-shown"),
              setTimeout(function () {
                $("body")
                  .removeClass("g-navbar-search-show")
                  .addClass("g-navbar-search-hiding");
              }, 150),
              setTimeout(function () {
                $("body")
                  .removeClass("g-navbar-search-hiding")
                  .addClass("g-navbar-search-hidden");
              }, 300),
              setTimeout(function () {
                $("body").removeClass("g-navbar-search-hidden");
              }, 500);
        }
      }),
      $(".sidenav").on("mouseenter", function () {
        $("body").hasClass("g-sidenav-pinned") ||
          $("body")
            .removeClass("g-sidenav-hide")
            .removeClass("g-sidenav-hidden")
            .addClass("g-sidenav-show");
      }),
      $(".sidenav").on("mouseleave", function () {
        $("body").hasClass("g-sidenav-pinned") ||
          ($("body").removeClass("g-sidenav-show").addClass("g-sidenav-hide"),
          setTimeout(function () {
            $("body")
              .removeClass("g-sidenav-hide")
              .addClass("g-sidenav-hidden");
          }, 300));
      }),
      $(window).on("load resize", function () {
        $("body").height() < 800 &&
          ($("body").css("min-height", "100vh"),
          $("#footer-main").addClass("footer-auto-bottom"));
      });
  })(),
  Charts = (function () {
    let a,
      e = $('[data-toggle="chart"]'),
      n = "light",
      t = { base: "Open Sans" },
      o = {
        gray: {
          100: "#f6f9fc",
          200: "#e9ecef",
          300: "#dee2e6",
          400: "#ced4da",
          500: "#adb5bd",
          600: "#8898aa",
          700: "#525f7f",
          800: "#32325d",
          900: "#212529",
        },
        theme: {
          default: "#172b4d",
          //Color de la línea de gráfica
          primary: "#ffb930",
          //Fin
          secondary: "#f4f5f7",
          info: "#11cdef",
          success: "#2dce89",
          danger: "#f5365c",
          warning: "#fb6340",
        },
        black: "#12263F",
        white: "#FFFFFF",
        transparent: "transparent",
      };
    function s(a, e) {
      for (let n in e) "object" != typeof e[n] ? (a[n] = e[n]) : s(a[n], e[n]);
    }
    function r(a) {
      let e = a.data("add"),
        n = $(a.data("target")).data("chart");
      a.is(":checked")
        ? (!(function a(e, n) {
            for (let t in n)
              Array.isArray(n[t])
                ? n[t].forEach(function (a) {
                    e[t].push(a);
                  })
                : a(e[t], n[t]);
          })(n, e),
          n.update())
        : (!(function a(e, n) {
            for (let t in n)
              Array.isArray(n[t])
                ? n[t].forEach(function (a) {
                    e[t].pop();
                  })
                : a(e[t], n[t]);
          })(n, e),
          n.update());
    }
    function i(a) {
      let e = a.data("update"),
        n = $(a.data("target")).data("chart");
      s(n, e),
        (function (a, e) {
          if (void 0 !== a.data("prefix") || void 0 !== a.data("prefix")) {
            let n = a.data("prefix") ? a.data("prefix") : "",
              t = a.data("suffix") ? a.data("suffix") : "";
            (e.options.scales.yAxes[0].ticks.callback = function (a) {
              if (!(a % 10)) return n + a + t;
            }),
              (e.options.tooltips.callbacks.label = function (a, e) {
                let o = e.datasets[a.datasetIndex].label || "",
                  s = a.yLabel,
                  r = "";
                return (
                  e.datasets.length > 1 &&
                    (r +=
                      '<span class="popover-body-label mr-auto">' +
                      o +
                      "</span>"),
                  (r +=
                    '<span class="popover-body-value">' + n + s + t + "</span>")
                );
              });
          }
        })(a, n),
        n.update();
    }
    return (
      window.Chart &&
        s(
          Chart,
          ((a = {
            defaults: {
              global: {
                responsive: !0,
                maintainAspectRatio: !1,
                defaultColor: "dark" == n ? o.gray[700] : o.gray[600],
                defaultFontColor: "dark" == n ? o.gray[700] : o.gray[600],
                defaultFontFamily: t.base,
                defaultFontSize: 13,
                layout: { padding: 0 },
                legend: {
                  display: true,
                  position: "bottom",
                  labels: { usePointStyle: !0, padding: 16 },
                },
                elements: {
                  point: { radius: 0, backgroundColor: o.theme.primary },
                  line: {
                    tension: 0.4,
                    borderWidth: 4,
                    borderColor: o.theme.primary,
                    backgroundColor: o.transparent,
                    borderCapStyle: "rounded",
                  },
                  rectangle: { backgroundColor: o.theme.warning },
                  arc: {
                    backgroundColor: o.theme.primary,
                    borderColor: "dark" == n ? o.gray[800] : o.white,
                    borderWidth: 4,
                  },
                },
                tooltips: { enabled: !0, mode: "index", intersect: !1 },
              },
              doughnut: {
                cutoutPercentage: 83,
                legendCallback: function (a) {
                  let e = a.data,
                    n = "";
                  return (
                    e.labels.forEach(function (a, t) {
                      let o = e.datasets[0].backgroundColor[t];
                      (n += '<span class="chart-legend-item">'),
                        (n +=
                          '<i class="chart-legend-indicator" style="background-color: ' +
                          o +
                          '"></i>'),
                        (n += a),
                        (n += "</span>");
                    }),
                    n
                  );
                },
              },
            },
          }),
          Chart.scaleService.updateScaleDefaults("linear", {
            gridLines: {
              borderDash: [2],
              borderDashOffset: [2],
              color: "dark" == n ? o.gray[900] : o.gray[300],
              drawBorder: !1,
              drawTicks: !1,
              drawOnChartArea: !0,
              zeroLineWidth: 0,
              zeroLineColor: "rgba( 0,0,0,0)",
              zeroLineBorderDash: [2],
              zeroLineBorderDashOffset: [2],
            },
            ticks: {
              beginAtZero: !0,
              padding: 10,
              callback: function (a) {
                if (!(a % 10)) return a;
              },
            },
          }),
          Chart.scaleService.updateScaleDefaults("category", {
            gridLines: { drawBorder: !1, drawOnChartArea: !1, drawTicks: !1 },
            ticks: { padding: 20 },
            maxBarThickness: 10,
          }),
          a)
        ),
      e.on({
        change: function () {
          let a = $(this);
          a.is("[data-add]") && r(a);
        },
        click: function () {
          let a = $(this);
          a.is("[data-update]") && i(a);
        },
      }),
      { colors: o, fonts: t, mode: n }
    );
  })(),
  Navbar = (function () {
    let a = $(".navbar-nav, .navbar-nav .nav"),
      e = $(".navbar .collapse"),
      n = $(".navbar .dropdown");
    e.on({
      "show.bs.collapse": function () {
        let n;
        (n = $(this)).closest(a).find(e).not(n).collapse("hide");
      },
    }),
      n.on({
        "hide.bs.dropdown": function () {
          let a, e;
          (a = $(this)),
            (e = a.find(".dropdown-menu")).addClass("close"),
            setTimeout(function () {
              e.removeClass("close");
            }, 200);
        },
      });
  })(),
  NavbarCollapse = (function () {
    $(".navbar-nav");
    let a = $(".navbar .navbar-custom-collapse");
    a.length &&
      (a.on({
        "hide.bs.collapse": function () {
          a.addClass("collapsing-out");
        },
      }),
      a.on({
        "hidden.bs.collapse": function () {
          a.removeClass("collapsing-out");
        },
      }));
    let e = 0;
    $(".sidenav-toggler").click(function () {
      if (1 == e)
        $("body").removeClass("nav-open"), (e = 0), $(".bodyClick").remove();
      else {
        $('<div class="bodyClick"></div>')
          .appendTo("body")
          .click(function () {
            $("body").removeClass("nav-open"),
              (e = 0),
              $(".bodyClick").remove();
          }),
          $("body").addClass("nav-open"),
          (e = 1);
      }
    });
  })(),
  Popover = (function () {
    let a = $('[data-toggle="popover"]'),
      e = "";
    a.length &&
      a.each(function () {
        !(function (a) {
          a.data("color") && (e = "popover-" + a.data("color"));
          let n = {
            trigger: "focus",
            template:
              '<div class="popover ' +
              e +
              '" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
          };
          a.popover(n);
        })($(this));
      });
  })(),
  ScrollTo = (function () {
    let a = $(".scroll-me, [data-scroll-to], .toc-entry a");
    function e(a) {
      let e = a.attr("href"),
        n = a.data("scroll-to-offset") ? a.data("scroll-to-offset") : 0,
        t = { scrollTop: $(e).offset().top - n };
      $("html, body").stop(!0, !0).animate(t, 600), event.preventDefault();
    }
    a.length &&
      a.on("click", function (a) {
        e($(this));
      });
  })(),
  Tooltip = (function () {
    let a = $('[data-toggle="tooltip"]');
    a.length && a.tooltip();
  })(),
  FormControl = (function () {
    let a = $(".form-control");
    a.length &&
      a
        .on("focus blur", function (a) {
          $(this)
            .parents(".form-group")
            .toggleClass("focused", "focus" === a.type);
        })
        .trigger("blur");
  })(),
  $map = $("#map-default"),
  color = "#5e72e4";

/* Nombre de los meses estadisticas total orders */
let BarsChart = (function () {
    let a = $("#chart-bars");
    a.length &&
      (function (a) {
        let e = new Chart(a, {
          type: "bar",
          data: {
            labels: ["Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom"],
            /* Contenido -> Lugar a modificar para mostrar la gráfica*/
            datasets: [{ label: "Ventas", data: [20, 20, 30, 22, 17, 29, 30] }],
          },
        });
        a.data("chart", e);
      })(a);
  })(),
  SalesChart = (function () {
    let a = $("#chart-sales-dark");
    a.length &&
      (function (a) {
        let e = new Chart(a, {
          type: "line",
          options: {
            scales: {
              yAxes: [
                {
                  gridLines: {
                    display: true,
                    lineWidth: 1,
                    color: Charts.colors.gray[900],
                    zeroLineColor: Charts.colors.gray[900],
                  },
                  ticks: {
                    callback: function (a) {
                      /* Valores de la izquierda */
                      if (!(a % 10)) return "$" + a + "M";
                    },
                  },
                },
              ],
            },
            /* Información que se muestra en el tooltip */
            tooltips: {
              callbacks: {
                label: function (a, e) {
                  let n = e.datasets[a.datasetIndex].label || "",
                    t = a.yLabel,
                    o = "";
                  return (
                    /* TODO: Solucinar */
                    e.datasets.length > 1 &&
                      (o += `
                        ${n}
                       `),
                    /* Información que sale en el tooltip */
                    (o += `$${t}`)
                  );
                },
              },
            },
          },
          data: {
            labels: labelVentas,
            datasets: [
              {
                label: "Ventas",
                /* Contenido -> Lugar a modificar para mostrar la gráfica*/
                data: datosVentas, //Línea data
              },
            ],
          },
        });
        a.data("chart", e);
      })(a);
  })(),
  Datepicker = function () {
    let a = $(".datepicker");
    a.length &&
      a.each(function () {
        $(this).datepicker({ disableTouchKeyboard: !0, autoclose: !1 });
      });
  };
